diff --git a/module/ffmedia.c b/module/ffmedia.c
index 300c325aa..3bc96c1d8 100644
--- a/module/ffmedia.c
+++ b/module/ffmedia.c
@@ -84,6 +84,9 @@ static int64_t rwops_seek(void *opaque, int64_t offset, int whence) {
 static AVIOContext *rwops_open(SDL_RWops *rw) {
 
     unsigned char *buffer = av_malloc(RWOPS_BUFFER);
+	if (buffer == NULL) {
+		return NULL;
+	}
     AVIOContext *rv = avio_alloc_context(
         buffer,
         RWOPS_BUFFER,
@@ -92,6 +95,10 @@ static AVIOContext *rwops_open(SDL_RWops *rw) {
         rwops_read,
         rwops_write,
         rwops_seek);
+    if (rv == NULL) {
+    	av_free(buffer);
+    	return NULL;
+    }
 
     return rv;
 }
@@ -134,6 +141,9 @@ typedef struct SurfaceQueueEntry {
 
 typedef struct MediaState {
 
+#ifdef __SWITCH__
+	SDL_Thread* thread;
+#endif
 
 	/* The condition and lock. */
 	SDL_cond* cond;
@@ -266,21 +276,34 @@ static void deallocate(MediaState *ms) {
 			break;
 		}
 
-		SDL_free(sqe->pixels);
+		if (sqe->pixels) {
+			SDL_free(sqe->pixels);
+		}
 		av_free(sqe);
 	}
 
-	sws_freeContext(ms->sws);
+	if (ms->sws) {
+		sws_freeContext(ms->sws);
+	}
 
-	av_frame_free(&ms->video_decode_frame);
+	if (ms->video_decode_frame) {
+		av_frame_free(&ms->video_decode_frame);
+	}
 
 	av_packet_unref(&ms->video_pkt);
 
 	/* Destroy audio stuff. */
-	swr_free(&ms->swr);
+	if (ms->swr) {
+		swr_free(&ms->swr);
+	}
 
-	av_frame_free(&ms->audio_decode_frame);
-	av_frame_free(&ms->audio_out_frame);
+	if (ms->audio_decode_frame) {
+		av_frame_free(&ms->audio_decode_frame);
+	}
+
+	if (ms->audio_out_frame) {
+		av_frame_free(&ms->audio_out_frame);
+	}
 
 	while (1) {
 		AVFrame *f = dequeue_frame(&ms->audio_queue);
@@ -296,29 +319,46 @@ static void deallocate(MediaState *ms) {
 	free_packet_queue(&ms->audio_packet_queue);
 	free_packet_queue(&ms->video_packet_queue);
 
-	avcodec_free_context(&ms->video_context);
-	avcodec_free_context(&ms->audio_context);
+	if (ms->video_context) {
+		avcodec_free_context(&ms->video_context);
+	}
+	if (ms->audio_context) {
+		avcodec_free_context(&ms->audio_context);
+	}
 
 	if (ms->ctx) {
 		for (int i = 0; i < ms->ctx->nb_streams; i++) {
-			avcodec_close(ms->ctx->streams[i]->codec);
+			if (ms->ctx->streams[i]->codec) {
+				avcodec_close(ms->ctx->streams[i]->codec);
+			}
 		}
-	}
 
-	if (ms->ctx->pb) {
-		av_freep(&ms->ctx->pb->buffer);
-		av_freep(&ms->ctx->pb);
-	}
+		if (ms->ctx->pb) {
+			if (ms->ctx->pb->buffer) {
+				av_freep(&ms->ctx->pb->buffer);
+			}
+			av_freep(&ms->ctx->pb);
+		}
 
-	avformat_close_input(&ms->ctx);
+		avformat_close_input(&ms->ctx);
+		avformat_free_context(ms->ctx);
+	}
 
 	/* Destroy alloc stuff. */
-	SDL_DestroyCond(ms->cond);
-	SDL_DestroyMutex(ms->lock);
+	if (ms->cond) {
+		SDL_DestroyCond(ms->cond);
+	}
+	if (ms->lock) {
+		SDL_DestroyMutex(ms->lock);
+	}
 
-	rwops_close(ms->rwops);
+	if (ms->rwops) {
+		rwops_close(ms->rwops);
+	}
 
-	av_free(ms->filename);
+	if (ms->filename) {
+		av_free(ms->filename);
+	}
 	av_free(ms);
 }
 
@@ -351,6 +391,10 @@ static AVFrame *dequeue_frame(FrameQueue *fq) {
 
 static void enqueue_packet(PacketQueue *pq, AVPacket *pkt) {
 	AVPacketList *pl = av_malloc(sizeof(AVPacketList));
+	if (pl == NULL)
+	{
+		return;
+	}
 
 	av_init_packet(&pl->pkt);
 	av_packet_ref(&pl->pkt, pkt);
@@ -496,6 +540,10 @@ static AVCodecContext *find_context(AVFormatContext *ctx, int index) {
 
 	codec_ctx = avcodec_alloc_context3(codec);
 
+	if (codec_ctx == NULL) {
+		return NULL;
+	}
+
 	if (avcodec_copy_context(codec_ctx, codec_ctx_orig)) {
 		goto fail;
 	}
@@ -530,6 +578,11 @@ static void decode_audio(MediaState *ms) {
 		ms->audio_decode_frame = av_frame_alloc();
 	}
 
+	if (ms->audio_decode_frame == NULL) {
+		ms->audio_finished = 1;
+		return;
+	}
+
 	av_init_packet(&pkt);
 
 	double timebase = av_q2d(ms->ctx->streams[ms->audio_stream]->time_base);
@@ -572,6 +625,12 @@ static void decode_audio(MediaState *ms) {
 			}
 
             converted_frame = av_frame_alloc();
+
+			if (converted_frame == NULL) {
+				ms->audio_finished = 1;
+				return;
+			}
+
             converted_frame->sample_rate = audio_sample_rate;
             converted_frame->channel_layout = AV_CH_LAYOUT_STEREO;
             converted_frame->format = AV_SAMPLE_FMT_S16;
@@ -738,6 +797,10 @@ static SurfaceQueueEntry *decode_video_frame(MediaState *ms) {
 	}
 
 	SurfaceQueueEntry *rv = av_malloc(sizeof(SurfaceQueueEntry));
+	if (rv == NULL) {
+		ms->video_finished = 1;
+		return NULL;
+	}
 	rv->w = ms->video_decode_frame->width + FRAME_PADDING * 2;
 	rv->pitch = rv->w * sample->format->BytesPerPixel;
 	rv->h = ms->video_decode_frame->height + FRAME_PADDING * 2;
@@ -788,6 +851,11 @@ static void decode_video(MediaState *ms) {
 		ms->video_decode_frame = av_frame_alloc();
 	}
 
+	if (!ms->video_decode_frame) {
+		ms->video_finished = 1;
+		return;
+	}
+
 	SDL_LockMutex(ms->lock);
 
 	if (!ms->video_finished && (ms->surface_queue_size < FRAMES)) {
@@ -956,13 +1024,21 @@ static int decode_thread(void *arg) {
 	int err;
 
 	AVFormatContext *ctx = avformat_alloc_context();
+	if (ctx == NULL) {
+		goto finish;
+	}
 	ms->ctx = ctx;
 
 	AVIOContext *io_context = rwops_open(ms->rwops);
+	if (io_context == NULL) {
+		goto finish;
+	}
 	ctx->pb = io_context;
 
 	err = avformat_open_input(&ctx, ms->filename, NULL, NULL);
 	if (err) {
+		avformat_free_context(ctx);
+		ms->ctx = NULL;
 		goto finish;
 	}
 
@@ -993,6 +1069,9 @@ static int decode_thread(void *arg) {
 	ms->audio_context = find_context(ctx, ms->audio_stream);
 
 	ms->swr = swr_alloc();
+	if (ms->swr == NULL) {
+		goto finish;
+	}
 
 	av_init_packet(&ms->video_pkt);
 
@@ -1107,19 +1186,27 @@ static int decode_sync_start(void *arg) {
 	int err;
 
 	AVFormatContext *ctx = avformat_alloc_context();
+	if (ctx == NULL) {
+		media_read_sync_finish(ms);
+	}
 	ms->ctx = ctx;
 
 	AVIOContext *io_context = rwops_open(ms->rwops);
+	if (io_context == NULL) {
+		media_read_sync_finish(ms);
+	}
 	ctx->pb = io_context;
 
 	err = avformat_open_input(&ctx, ms->filename, NULL, NULL);
 	if (err) {
-	  media_read_sync_finish(ms);
+		avformat_free_context(ctx);
+		ms->ctx = NULL;
+		media_read_sync_finish(ms);
 	}
 
 	err = avformat_find_stream_info(ctx, NULL);
 	if (err) {
-	  media_read_sync_finish(ms);
+		media_read_sync_finish(ms);
 	}
 
 
@@ -1144,6 +1231,9 @@ static int decode_sync_start(void *arg) {
 	ms->audio_context = find_context(ctx, ms->audio_stream);
 
 	ms->swr = swr_alloc();
+	if (ms->swr == NULL) {
+		media_read_sync_finish(ms);
+	}
 
 	av_init_packet(&ms->video_pkt);
 
@@ -1329,8 +1419,13 @@ void media_start(MediaState *ms) {
 	SDL_Thread *t = SDL_CreateThread(decode_thread, buf, (void *) ms);
 
 	if (t) {
+#ifdef __SWITCH__
+		ms->thread = t;
+#endif
 		ms->started = 1;
+#ifndef __SWITCH__
 		SDL_DetachThread(t);
+#endif
 	}
 #endif
 }
@@ -1338,12 +1433,27 @@ void media_start(MediaState *ms) {
 
 MediaState *media_open(SDL_RWops *rwops, const char *filename) {
 	MediaState *ms = av_calloc(1, sizeof(MediaState));
+	if (ms == NULL) {
+		return NULL;
+	}
 
 	ms->filename = av_strdup(filename);
+	if (ms->filename == NULL) {
+		deallocate(ms);
+		return NULL;
+	}
 	ms->rwops = rwops;
 
 	ms->cond = SDL_CreateCond();
+	if (ms->cond == NULL) {
+		deallocate(ms);
+		return NULL;
+	}
 	ms->lock = SDL_CreateMutex();
+	if (ms->lock == NULL) {
+		deallocate(ms);
+		return NULL;
+	}
 
 	ms->audio_duration = -1;
 	ms->frame_drops = 1;
@@ -1389,6 +1499,10 @@ void media_close(MediaState *ms) {
 		return;
 	}
 
+#ifdef __SWITCH__
+	SDL_Thread *t = ms->thread;
+#endif
+
 	/* Tell the decoder to terminate. It will deallocate everything for us. */
 	SDL_LockMutex(ms->lock);
 	ms->quit = 1;
@@ -1400,6 +1514,10 @@ void media_close(MediaState *ms) {
 	SDL_CondBroadcast(ms->cond);
 	SDL_UnlockMutex(ms->lock);
 
+#ifdef __SWITCH__
+	SDL_WaitThread(t, NULL);
+#endif
+
 }
 
 void media_advance_time(void) {
diff --git a/module/glcompat.h b/module/glcompat.h
index b88f09f00..674b4c0e3 100644
--- a/module/glcompat.h
+++ b/module/glcompat.h
@@ -37,6 +37,10 @@
 
     #define RENPY_GLES_2
 
+#elif defined __SWITCH__
+
+    #define RENPY_GLES_2
+
 #else
 
 	#define RENPY_OPENGL
diff --git a/module/renpysound_core.c b/module/renpysound_core.c
index 75413a146..c15bf1119 100644
--- a/module/renpysound_core.c
+++ b/module/renpysound_core.c
@@ -576,6 +576,10 @@ static int check_channel(int c) {
 struct MediaState *load_sample(SDL_RWops *rw, const char *ext, double start, double end, int video) {
     struct MediaState *rv;
     rv = media_open(rw, ext);
+    if (rv == NULL)
+    {
+        return NULL;
+    }
     media_start_end(rv, start, end);
 
     if (video) {
diff --git a/renpy.py b/renpy.py
index 0c7e53012..92dd67f70 100644
--- a/renpy.py
+++ b/renpy.py
@@ -131,6 +131,9 @@ def path_to_saves(gamedir, save_directory=None):
             rv = "~/RenPy/" + renpy.config.save_directory
             return os.path.expanduser(rv)
 
+    elif renpy.switch:
+        return "sdmc:/Ren'Py Data/" + save_directory
+
     else:
         rv = "~/.renpy/" + save_directory
         return os.path.expanduser(rv)
diff --git a/renpy/__init__.py b/renpy/__init__.py
index de5524508..e8ff53123 100644
--- a/renpy/__init__.py
+++ b/renpy/__init__.py
@@ -71,6 +71,7 @@ linux = False
 android = False
 ios = False
 emscripten = False
+switch = False
 
 # Should we enable experimental features and debugging?
 experimental = "RENPY_EXPERIMENTAL" in os.environ
@@ -124,11 +125,13 @@ elif "ANDROID_PRIVATE" in os.environ:
     android = True
 elif sys.platform == 'emscripten' or "RENPY_EMSCRIPTEN" in os.environ:
     emscripten = True
+elif sys.platform == 'horizon':
+    switch = True
 else:
     linux = True
 
 # A flag that's true if we're on a smartphone or tablet-like platform.
-mobile = android or ios or emscripten
+mobile = android or ios or emscripten or switch
 
 # A flag that's set to true if the game directory is bundled inside a mac app.
 macapp = False
diff --git a/renpy/bootstrap.py b/renpy/bootstrap.py
index 8afc163b4..cea7848e0 100644
--- a/renpy/bootstrap.py
+++ b/renpy/bootstrap.py
@@ -307,6 +307,8 @@ You may be using a system install of python. Please run {0}.sh,
 
                 if renpy.android:
                     renpy.config.logdir = os.environ['ANDROID_PUBLIC']
+                elif renpy.switch:
+                    renpy.config.logdir = os.path.abspath("sdmc:/Ren'Py Logs/")
                 else:
                     renpy.config.logdir = basedir
 
@@ -359,5 +361,5 @@ You may be using a system install of python. Please run {0}.sh,
 
         # Prevent subprocess from throwing errors while trying to run it's
         # __del__ method during shutdown.
-        if not renpy.emscripten:
+        if not (renpy.emscripten or renpy.switch):
             subprocess.Popen.__del__ = popen_del
diff --git a/renpy/display/core.py b/renpy/display/core.py
index f72ecbbca..e64e410cc 100644
--- a/renpy/display/core.py
+++ b/renpy/display/core.py
@@ -1829,6 +1829,7 @@ class Interface(object):
         """
 
         pygame.display.hint("SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS", "0")
+        pygame.display.hint("SDL_TOUCH_MOUSE_EVENTS", "1")
 
         # Needed for Unity.
         wmclass = renpy.config.save_directory or os.path.basename(sys.argv[0])
@@ -2126,7 +2127,7 @@ class Interface(object):
         if not self.started:
             return
 
-        if background and not renpy.emscripten:
+        if background and not (renpy.emscripten or renpy.switch):
             self.bgscreenshot_event.clear()
             self.bgscreenshot_needed = True
 
diff --git a/renpy/display/video.py b/renpy/display/video.py
index 44d236630..8f5eeb4ef 100644
--- a/renpy/display/video.py
+++ b/renpy/display/video.py
@@ -374,7 +374,7 @@ class Movie(renpy.display.core.Displayable):
 
         self.play_callback = play_callback
 
-        if (self.channel == "movie") and (renpy.config.hw_video) and renpy.mobile:
+        if (self.channel == "movie") and (renpy.config.hw_video) and (renpy.android or renpy.ios):
             raise Exception("Movie(channel='movie') doesn't work on mobile when config.hw_video is true. (Use a different channel argument.)")
 
     def render(self, width, height, st, at):
diff --git a/renpy/gl/gldraw.pyx b/renpy/gl/gldraw.pyx
index 864b2ab27..111ab59c7 100644
--- a/renpy/gl/gldraw.pyx
+++ b/renpy/gl/gldraw.pyx
@@ -321,6 +321,18 @@ cdef class GLDraw:
             pwidth = 0
             pheight = 0
 
+        elif renpy.switch:
+            opengl = pygame.OPENGL
+            resizable = pygame.RESIZABLE
+
+            pygame.display.hint("SDL_OPENGL_ES_DRIVER", "1")
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_MAJOR_VERSION, 2);
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_MINOR_VERSION, 0);
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_PROFILE_MASK, pygame.GL_CONTEXT_PROFILE_ES)
+
+            pwidth = 1920
+            pheight = 1080
+
         else:
             opengl = pygame.OPENGL
 
@@ -522,6 +534,9 @@ cdef class GLDraw:
             # WebGL is GLES
             gltexture.use_gles()
 
+        elif renpy.switch:
+            gltexture.use_gles()
+
         else:
             gltexture.use_gl()
 
@@ -567,7 +582,7 @@ cdef class GLDraw:
 
         # Pick a texture environment subsystem.
 
-        if EGL or renpy.android or renpy.ios or renpy.emscripten or (allow_shader and use_subsystem(
+        if EGL or renpy.android or renpy.ios or renpy.emscripten or renpy.switch or (allow_shader and use_subsystem(
             glenviron_shader,
             "RENPY_GL_ENVIRON",
             "shader",
@@ -626,7 +641,7 @@ cdef class GLDraw:
                 return False
 
         # Pick a Render-to-texture method.
-        use_fbo = renpy.ios or renpy.android or renpy.emscripten or EGL or use_subsystem(
+        use_fbo = renpy.ios or renpy.android or renpy.emscripten or renpy.switch or EGL or use_subsystem(
                 glrtt_fbo,
                 "RENPY_GL_RTT",
                 "fbo",
diff --git a/renpy/gl2/gl2draw.pyx b/renpy/gl2/gl2draw.pyx
index 3c70d5762..43b2dceb9 100644
--- a/renpy/gl2/gl2draw.pyx
+++ b/renpy/gl2/gl2draw.pyx
@@ -286,6 +286,9 @@ cdef class GL2Draw:
             pygame.display.gl_set_attribute(pygame.GL_CONTEXT_PROFILE_MASK, pygame.GL_CONTEXT_PROFILE_ES)
         else:
             pygame.display.hint("SDL_OPENGL_ES_DRIVER", "0")
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_MAJOR_VERSION, 1);
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_MINOR_VERSION, 3);
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_PROFILE_MASK, pygame.GL_CONTEXT_PROFILE_COMPATIBILITY)
 
     def set_mode(self, virtual_size, physical_size, fullscreen):
         """
@@ -352,6 +355,10 @@ cdef class GL2Draw:
             pheight = 0
             gles = True
 
+        elif renpy.switch:
+            window_flags |= pygame.RESIZABLE
+            gles = True
+
         else:
             if self.dpi_scale == 1.0:
                 window_flags |= pygame.WINDOW_ALLOW_HIGHDPI
diff --git a/renpy/loader.py b/renpy/loader.py
index f4823c3b1..26ff2874d 100644
--- a/renpy/loader.py
+++ b/renpy/loader.py
@@ -305,7 +305,7 @@ class SubFile(object):
             self.name = None
 
     def open(self):
-        self.f = open(self.fn, "rb")
+        self.f = open(self.fn, "rb", 0)
         self.f.seek(self.base)
 
     def __enter__(self):
@@ -443,8 +443,8 @@ class SubFile(object):
 open_file = open
 
 if "RENPY_FORCE_SUBFILE" in os.environ:
-    def open_file(name, mode):
-        f = open(name, mode)
+    def open_file(name, mode, buffering):
+        f = open(name, mode, buffering)
 
         f.seek(0, 2)
         length = f.tell()
@@ -469,7 +469,7 @@ def load_core(name):
     if not renpy.config.force_archives:
         try:
             fn = transfn(name)
-            return open_file(fn, "rb")
+            return open_file(fn, "rb", 0)
         except:
             pass
 
diff --git a/renpy/loadsave.py b/renpy/loadsave.py
index 68e9074a8..6ce276ab0 100644
--- a/renpy/loadsave.py
+++ b/renpy/loadsave.py
@@ -563,7 +563,9 @@ def force_autosave(take_screenshot=False, block=False):
 
     autosave_not_running.clear()
 
-    if not renpy.emscripten:
+    if renpy.switch:
+        autosave_thread_function(take_screenshot)
+    elif not renpy.emscripten:
         autosave_thread = threading.Thread(target=autosave_thread_function, args=(take_screenshot,))
         autosave_thread.daemon = True
         autosave_thread.start()
diff --git a/renpy/persistent.py b/renpy/persistent.py
index 244a0ba80..f966b4d22 100644
--- a/renpy/persistent.py
+++ b/renpy/persistent.py
@@ -468,6 +468,10 @@ def MultiPersistent(name):
     elif renpy.macintosh:
         files = [ os.path.expanduser("~/.renpy/persistent"),
                   os.path.expanduser("~/Library/RenPy/persistent") ]
+
+    elif renpy.switch:
+        files = [ "sdmc:/Ren'Py Data/persistent" ]
+
     else:
         files = [ os.path.expanduser("~/.renpy/persistent") ]
 
