diff --git a/module/ffmedia.c b/module/ffmedia.c
index 300c325aa..253204538 100644
--- a/module/ffmedia.c
+++ b/module/ffmedia.c
@@ -134,6 +134,7 @@ typedef struct SurfaceQueueEntry {
 
 typedef struct MediaState {
 
+	SDL_Thread* thread;
 
 	/* The condition and lock. */
 	SDL_cond* cond;
@@ -1329,8 +1330,13 @@ void media_start(MediaState *ms) {
 	SDL_Thread *t = SDL_CreateThread(decode_thread, buf, (void *) ms);
 
 	if (t) {
+#ifdef __SWITCH__
+		ms->thread = t;
+#endif
 		ms->started = 1;
+#ifndef __SWITCH__
 		SDL_DetachThread(t);
+#endif
 	}
 #endif
 }
@@ -1389,6 +1395,10 @@ void media_close(MediaState *ms) {
 		return;
 	}
 
+#ifdef __SWITCH__
+	SDL_Thread *t = ms->thread;
+#endif
+
 	/* Tell the decoder to terminate. It will deallocate everything for us. */
 	SDL_LockMutex(ms->lock);
 	ms->quit = 1;
@@ -1400,6 +1410,10 @@ void media_close(MediaState *ms) {
 	SDL_CondBroadcast(ms->cond);
 	SDL_UnlockMutex(ms->lock);
 
+#ifdef __SWITCH__
+	SDL_WaitThread(t, NULL);
+#endif
+
 }
 
 void media_advance_time(void) {
diff --git a/module/glcompat.h b/module/glcompat.h
index b88f09f00..674b4c0e3 100644
--- a/module/glcompat.h
+++ b/module/glcompat.h
@@ -37,6 +37,10 @@
 
     #define RENPY_GLES_2
 
+#elif defined __SWITCH__
+
+    #define RENPY_GLES_2
+
 #else
 
 	#define RENPY_OPENGL
diff --git a/renpy.py b/renpy.py
index 0c7e53012..33a5eeee8 100644
--- a/renpy.py
+++ b/renpy.py
@@ -37,7 +37,10 @@ import warnings
 
 
 def path_to_common(renpy_base):
-    return renpy_base + "/renpy/common"
+    if os.path.exists("romfs:/Contents/renpy/common"):
+        return "romfs:/Contents/renpy/common"
+    else:
+        return renpy_base + "/renpy/common"
 
 # Given a directory holding a Ren'Py game, this is expected to return
 # the path to a directory that will hold save files.
@@ -131,6 +134,9 @@ def path_to_saves(gamedir, save_directory=None):
             rv = "~/RenPy/" + renpy.config.save_directory
             return os.path.expanduser(rv)
 
+    elif renpy.switch:
+        return "sdmc:/Ren'Py Data/" + save_directory
+
     else:
         rv = "~/.renpy/" + save_directory
         return os.path.expanduser(rv)
diff --git a/renpy/__init__.py b/renpy/__init__.py
index 2c016c874..0dc16f3cd 100644
--- a/renpy/__init__.py
+++ b/renpy/__init__.py
@@ -71,6 +71,7 @@ linux = False
 android = False
 ios = False
 emscripten = False
+switch = False
 
 # Should we enable experimental features and debugging?
 experimental = "RENPY_EXPERIMENTAL" in os.environ
@@ -125,10 +126,11 @@ elif "ANDROID_PRIVATE" in os.environ:
 elif sys.platform == 'emscripten' or "RENPY_EMSCRIPTEN" in os.environ:
     emscripten = True
 else:
-    linux = True
+    # linux = True
+    switch = True
 
 # A flag that's true if we're on a smartphone or tablet-like platform.
-mobile = android or ios or emscripten
+mobile = android or ios or emscripten or switch
 
 # A flag that's set to true if the game directory is bundled inside a mac app.
 macapp = False
diff --git a/renpy/bootstrap.py b/renpy/bootstrap.py
index 8afc163b4..54c86cf50 100644
--- a/renpy/bootstrap.py
+++ b/renpy/bootstrap.py
@@ -234,7 +234,10 @@ def bootstrap(renpy_base):
         if os.path.isdir(gamedir):
             break
     else:
-        gamedir = basedir
+        if os.path.exists("romfs:/Contents/game"):
+            gamedir = "romfs:/Contents/game"
+        else:
+            gamedir = basedir
 
     sys.path.insert(0, basedir)
 
@@ -268,7 +271,7 @@ You may be using a system install of python. Please run {0}.sh,
         raise
 
     # If we're not given a command, show the presplash.
-    if args.command == "run" and not renpy.mobile:
+    if args.command == "run" and ((not renpy.mobile) or renpy.switch):
         import renpy.display.presplash  # @Reimport
         renpy.display.presplash.start(basedir, gamedir)
 
@@ -299,6 +302,7 @@ You may be using a system install of python. Please run {0}.sh,
             exit_status = 1
 
             try:
+                renpy.exports.switch_overclock_system(True)
                 renpy.game.args = args
                 renpy.config.renpy_base = renpy_base
                 renpy.config.basedir = basedir
@@ -307,6 +311,8 @@ You may be using a system install of python. Please run {0}.sh,
 
                 if renpy.android:
                     renpy.config.logdir = os.environ['ANDROID_PUBLIC']
+                elif renpy.switch:
+                    renpy.config.logdir = os.path.abspath("sdmc:/Ren'Py Logs/")
                 else:
                     renpy.config.logdir = basedir
 
@@ -359,5 +365,5 @@ You may be using a system install of python. Please run {0}.sh,
 
         # Prevent subprocess from throwing errors while trying to run it's
         # __del__ method during shutdown.
-        if not renpy.emscripten:
+        if not (renpy.emscripten or renpy.switch):
             subprocess.Popen.__del__ = popen_del
diff --git a/renpy/display/core.py b/renpy/display/core.py
index f72ecbbca..4486f03f4 100644
--- a/renpy/display/core.py
+++ b/renpy/display/core.py
@@ -1829,6 +1829,7 @@ class Interface(object):
         """
 
         pygame.display.hint("SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS", "0")
+        pygame.display.hint("SDL_HINT_TOUCH_MOUSE_EVENTS", "1")
 
         # Needed for Unity.
         wmclass = renpy.config.save_directory or os.path.basename(sys.argv[0])
@@ -2767,6 +2768,8 @@ class Interface(object):
         else:
             renpy.plog(1, "start idle_frame (inexpensive)")
 
+        renpy.exports.switch_overclock_system_idle(expensive)
+
         # We want this to include the GC time, so we don't predict on
         # frames where we GC.
         start = get_time()
diff --git a/renpy/display/im.py b/renpy/display/im.py
index 576323000..0cf8dbf2e 100644
--- a/renpy/display/im.py
+++ b/renpy/display/im.py
@@ -32,6 +32,7 @@ import cStringIO
 import threading
 import time
 import io
+import gc
 
 
 # This is an entry in the image cache.
@@ -256,19 +257,35 @@ class Cache(object):
         # Otherwise, we load the image ourselves.
         if ce is None:
 
-            try:
-                if image in self.pin_cache:
-                    surf = self.pin_cache[image]
-                else:
+            tries = 2
+            while True:
+                try:
+                    if image in self.pin_cache:
+                        surf = self.pin_cache[image]
+                    else:
 
-                    if not predict:
-                        with renpy.game.ExceptionInfo("While loading %r:", image):
+                        if not predict:
+                            with renpy.game.ExceptionInfo("While loading %r:", image):
+                                surf = image.load()
+                        else:
                             surf = image.load()
-                    else:
-                        surf = image.load()
 
-            except:
-                raise
+                    break
+                except Exception as e:
+                    estr = repr(e)
+                    if tries >= 1:
+                        if ("Failed to allocate" in estr) or ("Out of memory" in estr) or ("Failed to decode" in estr):
+                            with self.lock:
+                                if tries <= 1:
+                                    self.cache_limit /= 2
+                                self.cleanout()
+                            gc.collect()
+
+                            if gc.garbage:
+                                del gc.garbage[:]
+                            tries -= 1
+                            continue
+                    raise
 
             w, h = surf.get_size()
 
diff --git a/renpy/display/video.py b/renpy/display/video.py
index 44d236630..8f5eeb4ef 100644
--- a/renpy/display/video.py
+++ b/renpy/display/video.py
@@ -374,7 +374,7 @@ class Movie(renpy.display.core.Displayable):
 
         self.play_callback = play_callback
 
-        if (self.channel == "movie") and (renpy.config.hw_video) and renpy.mobile:
+        if (self.channel == "movie") and (renpy.config.hw_video) and (renpy.android or renpy.ios):
             raise Exception("Movie(channel='movie') doesn't work on mobile when config.hw_video is true. (Use a different channel argument.)")
 
     def render(self, width, height, st, at):
diff --git a/renpy/exports.py b/renpy/exports.py
index bf41fc0ee..379d1614b 100644
--- a/renpy/exports.py
+++ b/renpy/exports.py
@@ -3802,3 +3802,42 @@ def is_init_phase():
     """
 
     return renpy.game.context().init_phase
+
+try:
+    import libnx
+except:
+    renpy.display.log.write("OOPS: libnx not initialized")
+    pass
+
+idle_is_active = False
+
+def switch_overclock_system(enable=False):
+    if 'libnx' not in sys.modules:
+        return
+
+    cpu_speed = 1020000000
+    mem_speed = 1331000000
+    if enable is True:
+        cpu_speed = 1785000000
+        mem_speed = 1600000000
+        renpy.display.log.write("Overclock enabled!")
+    else:
+        renpy.display.log.write("Overclock disabled!")
+
+    if libnx.hosversionBefore(8, 0, 0):
+        libnx.pcvSetClockRate(libnx.PcvModule_CpuBus, cpu_speed)
+        libnx.pcvSetClockRate(libnx.PcvModule_EMC, mem_speed)
+    else:
+        clkrstSession = libnx.new_ClkrstSession()
+        clkrstOpenSession(clkrstSession, PcvModuleId_CpuBus, 3);
+        clkrstSetClockRate(clkrstSession, cpu_speed);
+        clkrstCloseSession(clkrstSession);
+        clkrstOpenSession(clkrstSession, PcvModuleId_EMC, 3);
+        clkrstSetClockRate(clkrstSession, mem_speed);
+        clkrstCloseSession(clkrstSession);
+        delete_ClkrstSession(clkrstSession)
+
+def switch_overclock_system_idle(enable=False):
+    idle_is_active = enable
+    switch_overclock_system(idle_is_active)
+
diff --git a/renpy/gl/gldraw.pyx b/renpy/gl/gldraw.pyx
index 864b2ab27..527447395 100644
--- a/renpy/gl/gldraw.pyx
+++ b/renpy/gl/gldraw.pyx
@@ -522,6 +522,9 @@ cdef class GLDraw:
             # WebGL is GLES
             gltexture.use_gles()
 
+        elif renpy.switch:
+            gltexture.use_gles()
+
         else:
             gltexture.use_gl()
 
@@ -567,7 +570,7 @@ cdef class GLDraw:
 
         # Pick a texture environment subsystem.
 
-        if EGL or renpy.android or renpy.ios or renpy.emscripten or (allow_shader and use_subsystem(
+        if EGL or renpy.android or renpy.ios or renpy.emscripten or renpy.switch or (allow_shader and use_subsystem(
             glenviron_shader,
             "RENPY_GL_ENVIRON",
             "shader",
@@ -626,7 +629,7 @@ cdef class GLDraw:
                 return False
 
         # Pick a Render-to-texture method.
-        use_fbo = renpy.ios or renpy.android or renpy.emscripten or EGL or use_subsystem(
+        use_fbo = renpy.ios or renpy.android or renpy.emscripten or renpy.switch or EGL or use_subsystem(
                 glrtt_fbo,
                 "RENPY_GL_RTT",
                 "fbo",
diff --git a/renpy/persistent.py b/renpy/persistent.py
index 244a0ba80..f966b4d22 100644
--- a/renpy/persistent.py
+++ b/renpy/persistent.py
@@ -468,6 +468,10 @@ def MultiPersistent(name):
     elif renpy.macintosh:
         files = [ os.path.expanduser("~/.renpy/persistent"),
                   os.path.expanduser("~/Library/RenPy/persistent") ]
+
+    elif renpy.switch:
+        files = [ "sdmc:/Ren'Py Data/persistent" ]
+
     else:
         files = [ os.path.expanduser("~/.renpy/persistent") ]
 
